diff --git a/source/firewall/firewall.c b/source/firewall/firewall.c
index 7b92ee3b..8a78c08a 100644
--- a/source/firewall/firewall.c
+++ b/source/firewall/firewall.c
@@ -11461,6 +11461,101 @@ static void do_ipv4_UIoverWAN_filter(FILE* fp) {
         FIREWALL_DEBUG("Exiting do_ipv4_UIoverWAN_filter \n"); 
         #endif
 }
+
+static void do_flush_all_iptables(int v4)
+{
+    FIREWALL_DEBUG("Entering %s\n" COMMA __func__);
+    char table_cmd[128];
+    char table[64];
+    char chain[64];
+    FILE *fp_table, *fp_chain;
+    char iptables_v4_cmd[] = "/usr/sbin/iptables";
+    char iptables_v6_cmd[] = "/usr/sbin/ip6tables";
+    char *iptables_cmd;
+    char chain_cmd[128];
+
+    if (v4)
+        iptables_cmd = iptables_v4_cmd;
+    else
+        iptables_cmd = iptables_v6_cmd;
+
+    memset(table_cmd, 0, sizeof(table_cmd));
+    snprintf(table_cmd, sizeof(table_cmd), "%s-save | grep '^*' | cut -c2-", iptables_cmd);
+
+    fp_table = popen(table_cmd, "r");
+    if (fp_table == NULL) {
+        FIREWALL_DEBUG("Failed to run %s\n" COMMA table_cmd);
+        return;
+    }
+
+    memset(table, 0, sizeof(table));
+    while (fgets(table, sizeof(table), fp_table) != NULL) {
+        table[strcspn(table, "\n")] = '\0';
+        memset(chain_cmd, 0, sizeof(chain_cmd));
+        snprintf(chain_cmd, sizeof(chain_cmd), "%s  -L -t %s | grep \"Chain\" | awk '{print $2}' | grep -v '^NFM_' | grep -v '^CPORTAL_'", iptables_cmd, table);
+
+        fp_chain = popen(chain_cmd, "r");
+        if (fp_chain == NULL) {
+            FIREWALL_DEBUG("Failed to run %s\n" COMMA chain_cmd);
+            continue;
+        }
+
+        memset(chain, 0, sizeof(chain));
+        while (fgets(chain, sizeof(chain), fp_chain) != NULL) {
+            chain[strcspn(chain, "\n")] = '\0';
+            v_secure_system("%s -t %s -F %s", iptables_cmd, table, chain);
+        }
+        pclose(fp_chain);
+
+        fp_chain = popen(chain_cmd, "r");
+        if (fp_chain == NULL) {
+            FIREWALL_DEBUG("Failed to run %s\n" COMMA chain_cmd);
+            continue;
+        }
+
+        memset(chain, 0, sizeof(chain));
+        while (fgets(chain, sizeof(chain), fp_chain) != NULL) {
+            chain[strcspn(chain, "\n")] = '\0';
+            v_secure_system("%s -t %s -X %s 2>/dev/null", iptables_cmd, table, chain);
+        }
+        pclose(fp_chain);
+
+    }
+
+    pclose(fp_table);
+}
+
+static void do_mesh_rule_handler(FILE *mangle_fp, FILE *filter_fp, int ipv4)
+{
+    FIREWALL_DEBUG("Entering %s\n" COMMA __func__);
+    char buf[16];
+    char iptables_v4_cmd[] = "/usr/sbin/iptables";
+    char iptables_v6_cmd[] = "/usr/sbin/ip6tables";
+    char *iptables_cmd;
+    int ret;
+
+    memset(buf, 0, sizeof(buf));
+    syscfg_get(NULL, "mesh_enable", buf, sizeof(buf));
+    if (strcmp("true", buf) != 0)
+        return;
+
+    if (ipv4)
+        iptables_cmd = iptables_v4_cmd;
+    else
+        iptables_cmd = iptables_v6_cmd;
+
+    ret = v_secure_system("%s -L -t mangle | grep -q \"Chain NFM_FORWARD\"", iptables_cmd);
+    if (ret)
+        fprintf(mangle_fp, ":NFM_FORWARD - [0:0]\n");
+
+    ret = v_secure_system("%s -L -t mangle | grep -q \"Chain NFM_PREROUTING\"", iptables_cmd);
+    if (ret)
+        fprintf(mangle_fp, ":NFM_PREROUTING - [0:0]\n");
+
+    fprintf(mangle_fp, "-A PREROUTING -j NFM_PREROUTING\n");
+    fprintf(mangle_fp, "-A FORWARD -j NFM_FORWARD\n");
+    fprintf(filter_fp, "-A INPUT -i brlan0.cportal -j ACCEPT\n");
+}
 /*
  *  Procedure     : prepare_subtables
  *  Purpose       : prepare the iptables-restore file that establishes all
@@ -11789,6 +11884,8 @@ static int prepare_subtables(FILE *raw_fp, FILE *mangle_fp, FILE *nat_fp, FILE *
    fprintf(filter_fp, "%s\n", ":FORWARD ACCEPT [0:0]");
    fprintf(filter_fp, "%s\n", ":OUTPUT ACCEPT [0:0]");
 
+   do_mesh_rule_handler(mangle_fp, filter_fp, 1);
+
 #if !(defined(_COSA_INTEL_XB3_ARM_) || defined(_COSA_BCM_MIPS_))
     prepare_rabid_rules(filter_fp, mangle_fp, IP_V4);
 #else
@@ -13679,7 +13776,7 @@ static void do_ipv6_sn_filter(FILE* fp) {
     fprintf(fp, "*mangle\n");
     
    fprintf(fp, "%s\n", ":postrouting_qos - [0:0]");
- 
+
    #ifdef RDKB_EXTENDER_ENABLED
       add_if_mss_clamping(fp,AF_INET6);
    #endif
@@ -13928,7 +14025,7 @@ static void do_ipv6_nat_table(FILE* fp)
     FIREWALL_DEBUG("Exiting do_ipv6_nat_table \n");
 }
 
-static void do_ipv6_filter_table(FILE *fp);
+static void do_ipv6_filter_table(FILE *fp, FILE *mangle_fp);
 
 #define MAX_NO_IPV6_INF 10
 #define MAX_LEN_IPV6_INF 32
@@ -14093,7 +14190,7 @@ int prepare_ipv6_firewall(const char *fw_file)
 	ethwan_mso_gui_acess_rules(NULL,mangle_fp);
 #endif
 	
-	do_ipv6_filter_table(filter_fp);
+	do_ipv6_filter_table(filter_fp, mangle_fp);
 
 #if !(defined(_COSA_INTEL_XB3_ARM_) || defined(_COSA_BCM_MIPS_))
         prepare_rabid_rules(filter_fp, mangle_fp, IP_V6);
@@ -14243,7 +14340,7 @@ clean_up_files:
 	return ret;
 }
 
-static void do_ipv6_filter_table(FILE *fp){
+static void do_ipv6_filter_table(FILE *fp, FILE *mangle_fp){
 	FIREWALL_DEBUG("Inside do_ipv6_filter_table \n");
 
 #if defined(_COSA_BCM_ARM_) && (defined(_CBR_PRODUCT_REQ_) || defined(_XB6_PRODUCT_REQ_)) 
@@ -14263,6 +14360,8 @@ static void do_ipv6_filter_table(FILE *fp){
    fprintf(fp, ":lan2wan_pc_service - [0:0]\n");
    fprintf(fp, ":wan2lan - [0:0]\n");
 
+   do_mesh_rule_handler(mangle_fp, fp, 0);
+
 #ifdef _HUB4_PRODUCT_REQ_
 #ifdef HUB4_BFD_FEATURE_ENABLED
    fprintf(fp, ":%s - [0:0]\n", IPOE_HEALTHCHECK);
@@ -15858,7 +15957,9 @@ static int service_start ()
       	FIREWALL_DEBUG("starting %s service\n" COMMA service_name);
    /*  ipv4 */
    prepare_ipv4_firewall(filename1);
-   v_secure_system("iptables-restore -c  < /tmp/.ipt 2> /tmp/.ipv4table_error");
+
+   do_flush_all_iptables(1);
+   v_secure_system("iptables-restore -c -n < /tmp/.ipt 2> /tmp/.ipv4table_error");
 
    //if (!isFirewallEnabled) {
    //   unlink(filename1);
@@ -15866,7 +15967,8 @@ static int service_start ()
 
    /* ipv6 */
    prepare_ipv6_firewall(filename2);
-   v_secure_system("ip6tables-restore < /tmp/.ipt_v6 2> /tmp/.ipv6table_error");
+   do_flush_all_iptables(0);
+   v_secure_system("ip6tables-restore -n < /tmp/.ipt_v6 2> /tmp/.ipv6table_error");
 
    #ifdef _PLATFORM_RASPBERRYPI_
        /* Apply Mac Filtering rules for RPI-Device */
@@ -15962,12 +16064,9 @@ static int service_stop ()
    prepare_stopped_ipv4_firewall(fp);
    fclose(fp);
 
-   v_secure_system("iptables -t filter -F");
-   v_secure_system("iptables -t nat -F");
-   v_secure_system("iptables -t mangle -F");
-   v_secure_system("iptables -t raw -F");
+   do_flush_all_iptables(1);
 
-   v_secure_system("iptables-restore -c  < /tmp/.ipt");
+   v_secure_system("iptables-restore -c -n < /tmp/.ipt");
 
    sysevent_set(sysevent_fd, sysevent_token, "firewall-status", "stopped", 0);
    ulogf(ULOG_FIREWALL, UL_INFO, "stopped %s service", service_name);
